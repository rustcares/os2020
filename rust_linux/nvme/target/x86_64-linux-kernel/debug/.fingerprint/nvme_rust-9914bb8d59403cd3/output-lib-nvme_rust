{"message":"unreachable statement","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/jy/os2020/rust_linux/src/lib.rs","byte_start":8313,"byte_end":8326,"line_start":272,"line_end":272,"column_start":15,"column_end":28,"is_primary":true,"text":[{"text":"              __MOD = None;","highlight_start":15,"highlight_end":28}],"label":"unreachable statement","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":525,"byte_end":699,"line_start":32,"line_end":37,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"linux_kernel_module::kernel_module!(","highlight_start":1,"highlight_end":37},{"text":"    NVMeModule,","highlight_start":1,"highlight_end":16},{"text":"    author: b\"JyLee & SGLee\",","highlight_start":1,"highlight_end":30},{"text":"    description: b\"NVMe Linux Kernel Module Driver Written in Rust\",","highlight_start":1,"highlight_end":69},{"text":"    license: b\"GPL\"","highlight_start":1,"highlight_end":20},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"linux_kernel_module::kernel_module!","def_site_span":{"file_name":"/home/jy/os2020/rust_linux/src/lib.rs","byte_start":7508,"byte_end":10301,"line_start":247,"line_end":328,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! kernel_module {","highlight_start":1,"highlight_end":29},{"text":"    ($module:ty, $($name:ident : $value:expr),*) => {","highlight_start":1,"highlight_end":54},{"text":"        static mut __MOD: Option<$module> = None;","highlight_start":1,"highlight_end":50},{"text":"        #[no_mangle]","highlight_start":1,"highlight_end":21},{"text":"        pub extern \"C\" fn init_module() -> $crate::c_types::c_int {","highlight_start":1,"highlight_end":68},{"text":"            match <$module as $crate::KernelModule>::init() {","highlight_start":1,"highlight_end":62},{"text":"                Ok(m) => {","highlight_start":1,"highlight_end":27},{"text":"                    unsafe {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$crate::nvme_init_fn();","highlight_start":1,"highlight_end":27},{"text":"                        __MOD = Some(m);","highlight_start":1,"highlight_end":41},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return 0;","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Err(e) => {","highlight_start":1,"highlight_end":28},{"text":"                    return e.to_kernel_errno();","highlight_start":1,"highlight_end":48},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[no_mangle]","highlight_start":1,"highlight_end":21},{"text":"        pub extern \"C\" fn cleanup_module() {","highlight_start":1,"highlight_end":45},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                // Invokes drop() on __MOD, which should be used for cleanup.","highlight_start":1,"highlight_end":78},{"text":"  ","highlight_start":1,"highlight_end":3},{"text":"\t\t$crate::nvme_exit_fn();","highlight_start":1,"highlight_end":26},{"text":"              __MOD = None;","highlight_start":1,"highlight_end":28},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::kernel_module!(@attribute $name, $value);","highlight_start":1,"highlight_end":62},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // TODO: The modinfo attributes below depend on the compiler placing","highlight_start":1,"highlight_end":73},{"text":"    // the variables in order in the .modinfo section, so that you end up","highlight_start":1,"highlight_end":74},{"text":"    // with b\"key=value\\0\" in order in the section. This is a reasonably","highlight_start":1,"highlight_end":73},{"text":"    // standard trick in C, but I'm not sure that rustc guarantees it.","highlight_start":1,"highlight_end":71},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Ideally we'd be able to use concat_bytes! + stringify_bytes! +","highlight_start":1,"highlight_end":70},{"text":"    // some way of turning a string literal (or at least a string","highlight_start":1,"highlight_end":66},{"text":"    // literal token) into a bytes literal, and get a single static","highlight_start":1,"highlight_end":68},{"text":"    // [u8; * N] with the whole thing, but those don't really exist yet.","highlight_start":1,"highlight_end":73},{"text":"    // Most of the alternatives (e.g. .as_bytes() as a const fn) give","highlight_start":1,"highlight_end":70},{"text":"    // you a pointer, not an array, which isn't right.","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@attribute author, $value:expr) => {","highlight_start":1,"highlight_end":42},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static AUTHOR_KEY: [u8; 7] = *b\"author=\";","highlight_start":1,"highlight_end":54},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static AUTHOR_VALUE: [u8; $value.len()] = *$value;","highlight_start":1,"highlight_end":63},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static AUTHOR_NUL: [u8; 1] = *b\"\\0\";","highlight_start":1,"highlight_end":49},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@attribute description, $value:expr) => {","highlight_start":1,"highlight_end":47},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static DESCRIPTION_KEY: [u8; 12] = *b\"description=\";","highlight_start":1,"highlight_end":65},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static DESCRIPTION_VALUE: [u8; $value.len()] = *$value;","highlight_start":1,"highlight_end":68},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static DESCRIPTION_NUL: [u8; 1] = *b\"\\0\";","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@attribute license, $value:expr) => {","highlight_start":1,"highlight_end":43},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static LICENSE_KEY: [u8; 8] = *b\"license=\";","highlight_start":1,"highlight_end":56},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static LICENSE_VALUE: [u8; $value.len()] = *$value;","highlight_start":1,"highlight_end":64},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static LICENSE_NUL: [u8; 1] = *b\"\\0\";","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/jy/os2020/rust_linux/src/lib.rs","byte_start":8275,"byte_end":8297,"line_start":271,"line_end":271,"column_start":3,"column_end":25,"is_primary":false,"text":[{"text":"\t\t$crate::nvme_exit_fn();","highlight_start":3,"highlight_end":25}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":525,"byte_end":699,"line_start":32,"line_end":37,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"linux_kernel_module::kernel_module!(","highlight_start":1,"highlight_end":37},{"text":"    NVMeModule,","highlight_start":1,"highlight_end":16},{"text":"    author: b\"JyLee & SGLee\",","highlight_start":1,"highlight_end":30},{"text":"    description: b\"NVMe Linux Kernel Module Driver Written in Rust\",","highlight_start":1,"highlight_end":69},{"text":"    license: b\"GPL\"","highlight_start":1,"highlight_end":20},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"linux_kernel_module::kernel_module!","def_site_span":{"file_name":"/home/jy/os2020/rust_linux/src/lib.rs","byte_start":7508,"byte_end":10301,"line_start":247,"line_end":328,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! kernel_module {","highlight_start":1,"highlight_end":29},{"text":"    ($module:ty, $($name:ident : $value:expr),*) => {","highlight_start":1,"highlight_end":54},{"text":"        static mut __MOD: Option<$module> = None;","highlight_start":1,"highlight_end":50},{"text":"        #[no_mangle]","highlight_start":1,"highlight_end":21},{"text":"        pub extern \"C\" fn init_module() -> $crate::c_types::c_int {","highlight_start":1,"highlight_end":68},{"text":"            match <$module as $crate::KernelModule>::init() {","highlight_start":1,"highlight_end":62},{"text":"                Ok(m) => {","highlight_start":1,"highlight_end":27},{"text":"                    unsafe {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$crate::nvme_init_fn();","highlight_start":1,"highlight_end":27},{"text":"                        __MOD = Some(m);","highlight_start":1,"highlight_end":41},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return 0;","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Err(e) => {","highlight_start":1,"highlight_end":28},{"text":"                    return e.to_kernel_errno();","highlight_start":1,"highlight_end":48},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[no_mangle]","highlight_start":1,"highlight_end":21},{"text":"        pub extern \"C\" fn cleanup_module() {","highlight_start":1,"highlight_end":45},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                // Invokes drop() on __MOD, which should be used for cleanup.","highlight_start":1,"highlight_end":78},{"text":"  ","highlight_start":1,"highlight_end":3},{"text":"\t\t$crate::nvme_exit_fn();","highlight_start":1,"highlight_end":26},{"text":"              __MOD = None;","highlight_start":1,"highlight_end":28},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::kernel_module!(@attribute $name, $value);","highlight_start":1,"highlight_end":62},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // TODO: The modinfo attributes below depend on the compiler placing","highlight_start":1,"highlight_end":73},{"text":"    // the variables in order in the .modinfo section, so that you end up","highlight_start":1,"highlight_end":74},{"text":"    // with b\"key=value\\0\" in order in the section. This is a reasonably","highlight_start":1,"highlight_end":73},{"text":"    // standard trick in C, but I'm not sure that rustc guarantees it.","highlight_start":1,"highlight_end":71},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Ideally we'd be able to use concat_bytes! + stringify_bytes! +","highlight_start":1,"highlight_end":70},{"text":"    // some way of turning a string literal (or at least a string","highlight_start":1,"highlight_end":66},{"text":"    // literal token) into a bytes literal, and get a single static","highlight_start":1,"highlight_end":68},{"text":"    // [u8; * N] with the whole thing, but those don't really exist yet.","highlight_start":1,"highlight_end":73},{"text":"    // Most of the alternatives (e.g. .as_bytes() as a const fn) give","highlight_start":1,"highlight_end":70},{"text":"    // you a pointer, not an array, which isn't right.","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@attribute author, $value:expr) => {","highlight_start":1,"highlight_end":42},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static AUTHOR_KEY: [u8; 7] = *b\"author=\";","highlight_start":1,"highlight_end":54},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static AUTHOR_VALUE: [u8; $value.len()] = *$value;","highlight_start":1,"highlight_end":63},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static AUTHOR_NUL: [u8; 1] = *b\"\\0\";","highlight_start":1,"highlight_end":49},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@attribute description, $value:expr) => {","highlight_start":1,"highlight_end":47},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static DESCRIPTION_KEY: [u8; 12] = *b\"description=\";","highlight_start":1,"highlight_end":65},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static DESCRIPTION_VALUE: [u8; $value.len()] = *$value;","highlight_start":1,"highlight_end":68},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static DESCRIPTION_NUL: [u8; 1] = *b\"\\0\";","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@attribute license, $value:expr) => {","highlight_start":1,"highlight_end":43},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static LICENSE_KEY: [u8; 8] = *b\"license=\";","highlight_start":1,"highlight_end":56},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static LICENSE_VALUE: [u8; $value.len()] = *$value;","highlight_start":1,"highlight_end":64},{"text":"        #[link_section = \".modinfo\"]","highlight_start":1,"highlight_end":37},{"text":"        #[used]","highlight_start":1,"highlight_end":16},{"text":"        pub static LICENSE_NUL: [u8; 1] = *b\"\\0\";","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable statement\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:32:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mlinux_kernel_module::kernel_module!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    NVMeModule,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    author: b\"JyLee & SGLee\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    description: b\"NVMe Linux Kernel Module Driver Written in Rust\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    license: b\"GPL\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|__\u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33many code following this expression is unreachable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"field is never read: `message`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":148,"byte_end":163,"line_start":11,"line_end":11,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    message: String,","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `message`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    message: String,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}
